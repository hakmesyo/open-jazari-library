/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jazari.vision.template.frame;

import jazari.device.webcam.Camera;
import jazari.image_processing.ImageProcess;
import jazari.factory.FactoryUtils;
import jazari.gui.PanelPicture;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamListener;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.opencv.core.Core;

/**
 *
 * @author BAP1
 */
public class ProblemliTemplateFrameCameraObserver extends javax.swing.JFrame implements WebcamListener  {
    private Webcam webcam = null;
    private static BufferedImage bf = null;
    private long t = 0;
    private Camera camObject;

    /**
     * Creates new form NewJFrame
     */
    public ProblemliTemplateFrameCameraObserver() {
        initComponents();
        setExtendedState(getExtendedState() | JFrame.MAXIMIZED_BOTH);
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        List<Webcam> lst = Webcam.getWebcams();
        if (lst.size() > 0) {
            ComboBoxModel model = new DefaultComboBoxModel(lst.toArray());
            combo_cam.setModel(model);
        } else {
            JOptionPane.showMessageDialog(this, "No cam was found");
        }
        jSplitPane1.setDividerLocation(1100);
        camObject=new Camera();
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        panel_menu = new javax.swing.JPanel();
        btn_startLive = new javax.swing.JToggleButton();
        btn_online = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        combo_cam = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        btn_offline = new javax.swing.JButton();
        chk_isLive = new javax.swing.JCheckBox();
        chk_isFlip = new javax.swing.JCheckBox();
        panel_paint = new PanelPicture(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane1.setDividerLocation(600);

        panel_menu.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panel_menu.setPreferredSize(new java.awt.Dimension(150, 467));

        btn_startLive.setText("Start Camera");
        btn_startLive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_startLiveActionPerformed(evt);
            }
        });

        btn_online.setText("Online Processing");
        btn_online.setEnabled(false);
        btn_online.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_onlineActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Camera");

        combo_cam.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_cam.setPreferredSize(new java.awt.Dimension(190, 40));

        jButton1.setText("Options");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btn_offline.setText("Offline  Processing-1");
        btn_offline.setEnabled(false);
        btn_offline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_offlineActionPerformed(evt);
            }
        });

        chk_isLive.setSelected(true);
        chk_isLive.setText("live");

        chk_isFlip.setText("flip");

        javax.swing.GroupLayout panel_menuLayout = new javax.swing.GroupLayout(panel_menu);
        panel_menu.setLayout(panel_menuLayout);
        panel_menuLayout.setHorizontalGroup(
            panel_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_menuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_startLive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_offline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_online, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combo_cam, 0, 215, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_menuLayout.createSequentialGroup()
                        .addGroup(panel_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_menuLayout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_isLive)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_isFlip)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel_menuLayout.setVerticalGroup(
            panel_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_menuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_cam, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chk_isLive)
                    .addComponent(chk_isFlip))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_startLive, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(btn_online, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_offline, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(panel_menu);

        panel_paint.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panel_paint.setPreferredSize(new java.awt.Dimension(1200, 467));

        javax.swing.GroupLayout panel_paintLayout = new javax.swing.GroupLayout(panel_paint);
        panel_paint.setLayout(panel_paintLayout);
        panel_paintLayout.setHorizontalGroup(
            panel_paintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel_paintLayout.setVerticalGroup(
            panel_paintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 485, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(panel_paint);

        getContentPane().add(jSplitPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_startLiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_startLiveActionPerformed
        if (btn_startLive.isSelected()) {
            chk_isLive.setSelected(true);
            connectCamera();
            camObject.startLiveVideoStream(webcam);
            btn_startLive.setText("Stop Camera");
        } else {
            camObject.stopLiveVideoStream(webcam);
            btn_startLive.setText("Start Camera");
        }
    }//GEN-LAST:event_btn_startLiveActionPerformed

    private void btn_onlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_onlineActionPerformed
        if (btn_startLive.isSelected()) {
            btn_online.setText("Stop Online Process");
        }
        if (!btn_online.isSelected()) {
            btn_online.setText("Start Online Process");
        }
    }//GEN-LAST:event_btn_onlineActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btn_offlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_offlineActionPerformed
        doOfflineProcessing();
    }//GEN-LAST:event_btn_offlineActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProblemliTemplateFrameCameraObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProblemliTemplateFrameCameraObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProblemliTemplateFrameCameraObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProblemliTemplateFrameCameraObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProblemliTemplateFrameCameraObserver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_offline;
    private javax.swing.JToggleButton btn_online;
    private javax.swing.JToggleButton btn_startLive;
    private javax.swing.JCheckBox chk_isFlip;
    private javax.swing.JCheckBox chk_isLive;
    private javax.swing.JComboBox<String> combo_cam;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel panel_menu;
    private javax.swing.JPanel panel_paint;
    // End of variables declaration//GEN-END:variables

    @Override
    public void webcamOpen(WebcamEvent we) {
        System.out.println("Webcam is opened now");
    }

    @Override
    public void webcamClosed(WebcamEvent we) {
        System.out.println("Webcam is closed now");
    }

    @Override
    public void webcamDisposed(WebcamEvent we) {
        System.out.println("Webcam is disposed now");
    }

    double fps=0;
    @Override
    public void webcamImageObtained(WebcamEvent we) {
        if (chk_isLive.isSelected()) {
            bf = camObject.getImage();
            bf=ImageProcess.toBGR(bf);
            if (chk_isFlip.isSelected()) {
                bf=ImageProcess.flipVertical(bf);
            }
            bf = camObject.showTrueFPS(fps);
            if (btn_online.isSelected()) {
                bf = doOnline(bf);
            }
            bf = camObject.showFPS(webcam, bf);
            getPanel().setImage(bf,"","");
                            
            fps=FactoryUtils.fps(t);
            t = System.nanoTime();
        }
    }

    private void connectCamera() {
        webcam = Webcam.getWebcams().get(combo_cam.getSelectedIndex());
        webcam.setViewSize(WebcamResolution.VGA.getSize());
        webcam.addWebcamListener(this);
        webcam.open();
        btn_startLive.setEnabled(true);
        btn_online.setEnabled(true);
        btn_offline.setEnabled(true);
    }

    private BufferedImage doOnline(BufferedImage bf) {
        bf = ImageProcess.rgb2hsv(bf);
        return bf;
    }
    
    private void doOfflineProcessing() {
        if (webcam != null) {
            bf = webcam.getImage();
            bf = ImageProcess.toHSVColorSpace(bf);
            getPanel().setImage(bf,"","");
        }
    }

    public PanelPicture getPanel() {
        return (PanelPicture) panel_paint;
    }

}
