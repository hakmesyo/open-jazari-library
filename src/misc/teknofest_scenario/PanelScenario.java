/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package misc.teknofest_scenario;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import jazari.factory.FactoryUtils;
import jazari.image_processing.ImageProcess;

/**
 *
 * @author cezerilab
 */
public class PanelScenario extends javax.swing.JPanel implements KeyListener {

    private BufferedImage parkur;
    private Point mousePos = new Point(0, 0);
    private Point mousePosPrev = null;
    private Point mousePressedPos = new Point(0, 0);
    private boolean isMousePressedForRegionSelection = false;
    private float px;
    private float py;
    private Point p = new Point(0, 0);
    private JLabel lbl;
    public int state = 0; //0=normal navigation; 1=move entity; 2=draw waypoint list
    public BufferedImage tempAsset;
    public Graphics2D gr;
    public AssetComponent selectedAsset;
    ScenarioBuilder ref;
    private AssetComponent selectedAssetForLargerImage;
    private List<WayPoint> listWayPoint = new ArrayList();
    private List<AssetComponent> listAsset = new ArrayList();
    private boolean isNodeDoubleClicked = false;
    private AssetComponent selectedDoubleClickedNode = null;

    /**
     * Creates new form PanelScenario
     */
    public PanelScenario(ScenarioBuilder ref) {
        initComponents();
        this.ref = ref;
        initialize();
    }

    public void setImage(BufferedImage img) {
        parkur = ImageProcess.clone(img);
        repaint();
    }

    public List<AssetComponent> getAssetList() {
        return listAsset;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics gr) {
        this.gr = (Graphics2D) gr;

        gr.setColor(Color.BLACK);
        gr.fillRect(0, 0, getWidth(), getHeight());
        int wPanel = this.getWidth();
        int hPanel = this.getHeight();

        gr.drawImage(parkur, 0, 0, this);

        if (state == 0 || state == 2) {
            gr.setColor(Color.blue);
            gr.drawLine(0, mousePos.y, wPanel - 1, mousePos.y);
            gr.drawLine(mousePos.x, 0, mousePos.x, hPanel - 1);
            gr.setColor(Color.red);
            gr.drawRect(mousePos.x - 1, mousePos.y - 1, 2, 2);
            gr.drawRect(mousePos.x - 10, mousePos.y - 10, 20, 20);
        } else if (state == 1) {
            gr.setColor(Color.red);
            gr.drawRect(mousePos.x, mousePos.y, 100, 100);
            gr.drawImage(tempAsset, mousePos.x, mousePos.y, 100, 100, this);
        }
        drawAssets(gr);
        drawWayPoints(gr);
        if (selectedAssetForLargerImage != null && selectedAsset == null) {
            BufferedImage img = ImageProcess.clone(selectedAssetForLargerImage.img);
            img = ImageProcess.resize(img, 100, 100);
            gr.drawImage(img, mousePos.x - 50, mousePos.y - 50, 100, 100, this);
            if (selectedAssetForLargerImage.equals(selectedAsset)) {
                gr.setColor(Color.green);
                this.gr.setStroke(new BasicStroke(5));
                gr.drawRect(mousePos.x - 50, mousePos.y - 50, 100, 100);
                gr.setColor(Color.red);
                this.gr.setStroke(new BasicStroke(2));
                gr.drawRect(mousePos.x - 50, mousePos.y - 50, 10, 10);
                gr.drawRect(mousePos.x + 40, mousePos.y - 50, 10, 10);
                gr.drawRect(mousePos.x - 50, mousePos.y + 40, 10, 10);
                gr.drawRect(mousePos.x + 40, mousePos.y + 40, 10, 10);

            }
        }
        if (isMousePressedForRegionSelection) {
            this.gr.setColor(Color.blue);
            Stroke dashed = new BasicStroke(3, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL,
                    0, new float[]{9}, 0);
            this.gr.setStroke(dashed);
            this.gr.drawRect(mousePressedPos.x, mousePressedPos.y, mousePos.x - mousePressedPos.x, mousePos.y - mousePressedPos.y);
            this.gr.setStroke(new BasicStroke(1));
            selectAssetsInRegion(mousePressedPos.x, mousePressedPos.y, mousePos.x, mousePos.y);
        }

        lbl.setText(" Position X,Y = M( " + mousePos.x + " : " + mousePos.y + " ) V( " + px + " : " + py + " )");

        gr.setColor(Color.red);
        gr.drawRect(0, 0, wPanel - 1, hPanel - 1);
        gr.drawRect(1, 1, wPanel - 3, hPanel - 3);
        this.paintComponents(gr);
    }

    private void initialize() {
        addKeyListener(this);
        setFocusable(true);
        requestFocus();

        lbl = new JLabel("X:Y");
        this.add(lbl);
        lbl.setBounds(new Rectangle(10, 0, 500, 30));
        lbl.setBackground(Color.yellow);
        lbl.setForeground(Color.GREEN);
        lbl.setVisible(true);
        lbl.setFont(new Font("Calibri", Font.BOLD, 20));
        this.updateUI();

        addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                grabFocus();
                if (e.getClickCount() == 2 && !e.isConsumed()) {
                    e.consume();
                    //handle double click event here
                    if (selectedAsset != null) {
                        isNodeDoubleClicked = true;
                        selectedDoubleClickedNode = selectedAsset;
                        selectedDoubleClickedNode.isDoubleClicked = true;
                        System.out.println("double click for neighbor node link");
                    }
                }
                if (selectedAsset != null && e.getButton() == MouseEvent.BUTTON3) {
                    String test1 = JOptionPane.showInputDialog("Please input rotation degree");
                    if (test1 != null && !test1.isEmpty()) {
                        int deg = Integer.parseInt(test1);
                        selectedAsset.setRotationDegree(deg,true);
                    }
                }
            }

            public void mousePressed(java.awt.event.MouseEvent e) {
                grabFocus();
                if (e.getButton() == MouseEvent.BUTTON1) {
                    mousePos = e.getPoint();
                    if (checkAssetSelection()) {
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                ref.txt_script.requestFocus();
                                String str = ref.txt_script.getText();
                                int start = str.indexOf(selectedAsset.toScript());
                                int end = start + selectedAsset.toScript().length();
                                ref.txt_script.setSelectionStart(start);
                                ref.txt_script.setSelectionEnd(end);
                                try {
                                    Thread.sleep(100);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(PanelScenario.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                grabFocus();
                            }
                        }).start();
                    } else {
                        mousePressedPos = e.getPoint();
                        isMousePressedForRegionSelection = true;
                    }
                } else if (e.getButton() == MouseEvent.BUTTON3) { //left button click
                    if (selectedDoubleClickedNode != null) {
                        selectedDoubleClickedNode.isDoubleClicked = false;
                        selectedDoubleClickedNode = null;
                        isNodeDoubleClicked = false;
                    }
                }
            }

            public void mouseReleased(java.awt.event.MouseEvent e) {
                if (state == 1) {
                    if (e.getButton() == MouseEvent.BUTTON1) {
                        newAsset();
                    } else if (e.getButton() == MouseEvent.BUTTON3) {
                        tempAsset = null;
                    }
                    System.out.println("assetList size:" + listAsset.size());
                    state = 0;
                } else if (state == 2) { //way point
                    if (e.getButton() == MouseEvent.BUTTON1) {
                        if (mousePosPrev == null) {
                            Point p = getCarAgentPos();
                            if (p == null) {
                                JOptionPane.showMessageDialog(null, "First you have to load the car_agent into the map.");
                                state = 0;
                                return;
                            } else {
                                mousePosPrev = new Point(p.x, p.y);
                            }
                        }
                        System.out.println("mousePos = " + mousePos);
                        System.out.println("mousePosPrev = " + mousePosPrev);
                        addNewWayPoint();
                        mousePosPrev = e.getPoint();

                    }
                }
                mousePressedPos = e.getPoint();
                isMousePressedForRegionSelection = false;
                grabFocus();
            }

            private void checkForTriggerEvent(MouseEvent e) {
//                if (e.isPopupTrigger()) {
//                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
//                }
            }

        });

        this.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseMoved(java.awt.event.MouseEvent e) {
                mousePos = e.getPoint();
                px = toVirtualPosX(mousePos);
                py = toVirtualPosY(mousePos);
                repaint();
                checkAssetRegion();
            }

            public void mouseDragged(java.awt.event.MouseEvent e) {
                mousePos = e.getPoint();
                if (selectedAsset != null) {
                    //selectedAsset.setPosition(temp.x, temp.y, px, py);
                    selectedAsset.mx = mousePos.x - 10;
                    selectedAsset.my = mousePos.y - 10;
                    Point temp = new Point(selectedAsset.mx, selectedAsset.my);
                    px = toVirtualPosX(temp);
                    py = toVirtualPosY(temp);
                    selectedAsset.v_px=px+1.5f;
                    selectedAsset.v_py=py+1.5f;
                    updateScript();
                }
                repaint();
            }

        });
    }

    private Point getCarAgentPos() {
        Point ret = null;
        for (AssetComponent a : listAsset) {
            if (a.name.equals("car_agent")) {
                ret = new Point(a.mx, a.my);
            }
        }
        return ret;
    }

    private void addNewWayPoint() {
        if (mousePosPrev.x == mousePos.x && mousePosPrev.y == mousePos.y) {
            return;
        }
        listWayPoint.add(new WayPoint(this, mousePosPrev.x, mousePosPrev.y, mousePos.x, mousePos.y, toVirtualPosX(mousePosPrev), toVirtualPosY(mousePosPrev), toVirtualPosX(mousePos), toVirtualPosY(mousePos)));
    }

    public float toVirtualPos(int n) {
        return FactoryUtils.formatFloat(FactoryUtils.map(n, 0, parkur.getWidth(), -50.5f, 50.5f), 1);
    }

    public float toVirtualPosX(Point pt) {
        return FactoryUtils.formatFloat(FactoryUtils.map(pt.x, 0, parkur.getWidth(), -50.5f, 50.5f), 1);
    }

    public float toVirtualPosY(Point pt) {
        return FactoryUtils.formatFloat(FactoryUtils.map(pt.y, 0, parkur.getHeight(), -67.5f, 67.5f), 1);
    }

    public void updateScript() {
        String str = "";
        for (AssetComponent asset : listAsset) {
            str += asset.toScript() + "\n";
        }
        ref.txt_script.setText(str);
    }

    int dx;
    int dy;

    private boolean checkAssetSelection() {
        selectedAsset = null;
        for (AssetComponent asset : listAsset) {
            if (mousePos.x > asset.mx && mousePos.x < asset.mx + asset.width && mousePos.y > asset.my && mousePos.y < asset.my + asset.height) {
                asset.isSelected = true;
                selectedAsset = asset;
                if (isNodeDoubleClicked) {
                    selectedDoubleClickedNode.addNeighborNode(selectedAsset);
                    updateScript();
                }
            } else { //diğerlerinin seçimi kaldırılsın
                asset.isSelected = false;
            }
        }
        if (selectedAsset == null) {
            isNodeDoubleClicked = false;
            if (selectedDoubleClickedNode != null) {
                selectedDoubleClickedNode.isDoubleClicked = false;
                selectedDoubleClickedNode = null;
            }
        }
        repaint();
        return selectedAsset != null;
    }

    private void checkAssetRegion() {
        for (AssetComponent asset : listAsset) {
            if (mousePos.x > asset.mx && mousePos.x < asset.mx + asset.width && mousePos.y > asset.my && mousePos.y < asset.my + asset.height) {
                selectedAssetForLargerImage = asset;
                return;
            }
        }
        selectedAssetForLargerImage = null;
    }

    private void newAsset() {
        listAsset.add(new AssetComponent(this,null, ImageProcess.clone(tempAsset), ref.lst_asset.getSelectedValue(), 0, mousePos.x, mousePos.y, px, py));
        updateScript();
    }

    private void drawAssets(Graphics gr) {
        for (AssetComponent asset : listAsset) {
            asset.draw();
        }
    }

    private void drawWayPoints(Graphics gr) {
        for (WayPoint wp : listWayPoint) {
            wp.draw();
        }
    }

    private void deleteSelectedAsset() {
        List<AssetComponent> temp = new ArrayList();
        for (AssetComponent asset : listAsset) {
            if (!asset.isSelected) {
                temp.add(asset);
            }
        }
        listAsset.clear();
        for (AssetComponent asset : temp) {
            listAsset.add(asset);
        }
        //lstAsset.remove(selectedAsset);
        selectedAsset = null;
        updateScript();
        repaint();
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
//        System.out.println("key pressed on panel");
        if (e.getKeyCode() == KeyEvent.VK_DELETE) {
            deleteSelectedAsset();
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    private void selectAssetsInRegion(int x1, int y1, int x2, int y2) {
        for (AssetComponent asset : listAsset) {
            if (x1 < asset.mx && y1 < asset.my && x2 > asset.mx && y2 > asset.my) {
                asset.isSelected = true;
            } else {
                asset.isSelected = false;
            }
            asset.draw();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
